"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const discord_js_1 = __importDefault(require("discord.js"));
const fs = require('fs');
class Handler {
    constructor(client, dir, guild) {
        try {
            this.client = client;
            this.guild = guild;
            this.client.slashCommands = new discord_js_1.default.Collection();
            const files = fs.readdirSync(dir).filter((file) => file.endsWith('.js') || file.endsWith('.ts'));
            client.on('ready', () => {
                for (const file of files) {
                    const fileLocation = dir + '/' + file;
                    const command = require(fileLocation);
                    if (!command.name || !command.description || !command.execute) {
                        console.log(`${file} have not met the requirements`);
                    }
                    else {
                        if (command.options)
                            this.post({ data: { name: command.name, description: command.description, options: command.options } });
                        else
                            this.post({ data: { name: command.name, description: command.description } });
                        this.client.slashCommands.set(command.name, command);
                    }
                }
            });
            this.client.ws.on('INTERACTION_CREATE', (interaction) => __awaiter(this, void 0, void 0, function* () {
                const command = interaction.data.name.toLowerCase();
                if (this.client.slashCommands.has(command)) {
                    const args = [];
                    if (interaction.data.options) {
                        for (const option of interaction.data.options) {
                            const { name, value } = option;
                            args[name] = value;
                        }
                    }
                    const options = {
                        interaction,
                        client: this.client,
                        send: (content, additionnal_options) => __awaiter(this, void 0, void 0, function* () {
                            const createApiMessage = (interaction, content) => __awaiter(this, void 0, void 0, function* () {
                                const { data, files } = yield discord_js_1.default.APIMessage.create(this.client.channels.resolve(interaction.channel_id), content).resolveData().resolveFiles();
                                return Object.assign(Object.assign({}, data), { files });
                            });
                            const getFlag = () => {
                                if (additionnal_options !== undefined && additionnal_options.ephemeral == true)
                                    return 64;
                                else
                                    return null;
                            };
                            var result;
                            if (additionnal_options !== undefined) {
                                result = {
                                    flags: getFlag(),
                                    components: additionnal_options.components || null,
                                    content: content
                                };
                            }
                            else {
                                result = {
                                    content: content
                                };
                            }
                            if (typeof content === 'object')
                                result = yield createApiMessage(interaction, content);
                            const sendResponse = yield this.client.api.interactions(interaction.id, interaction.token).callback.post({
                                data: {
                                    type: (additionnal_options === null || additionnal_options === void 0 ? void 0 : additionnal_options.type) || 4,
                                    data: result,
                                }
                            });
                            return sendResponse;
                        }),
                        args,
                        channel: yield client.channels.resolve(interaction.channel_id),
                        guild: yield client.guilds.fetch(interaction.guild_id),
                        member: yield (yield client.guilds.fetch(interaction.guild_id)).members.fetch(interaction.member.user.id),
                        author: yield this.client.users.fetch(interaction.member.user.id)
                    };
                    this.client.slashCommands.get(command).execute(options);
                }
            }));
        }
        catch (err) {
            throw err;
        }
    }
    getApp() {
        const app = this.client.api.applications(this.client.user.id);
        if (this.guild) {
            app.guilds(this.guild);
        }
        return app;
    }
    post(data) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getApp().commands.post(data);
        });
    }
    send(data) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!data.interaction)
                return;
            if (!data.content)
                throw new Error('Content cannot be empty');
            const createApiMessage = (interaction, content) => __awaiter(this, void 0, void 0, function* () {
                const { data, files } = yield discord_js_1.default.APIMessage.create(this.client.channels.resolve(interaction.channel_id), content).resolveData().resolveFiles();
                return Object.assign(Object.assign({}, data), { files });
            });
            var result = {
                content: data.content
            };
            if (typeof data.content === 'object')
                result = yield createApiMessage(data.interaction, data.content);
            const sendResponse = yield this.client.api.interactions(data.interaction.id, data.interaction.token).callback.post({
                data: {
                    type: 4,
                    data: result
                }
            });
            return sendResponse;
        });
    }
}
module.exports = Handler;
//# sourceMappingURL=index.js.map